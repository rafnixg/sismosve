name: Maintenance

on:
  schedule:
    # Ejecutar todos los domingos a las 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety bandit

    - name: Check for security vulnerabilities
      id: security
      run: |
        echo "## Security Check Results" > security-report.md
        echo "" >> security-report.md
        
        # Safety check
        echo "### Dependency Vulnerabilities" >> security-report.md
        safety check --json > safety.json || true
        if [ -s safety.json ]; then
          echo "‚ö†Ô∏è Security vulnerabilities found in dependencies" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat safety.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        else
          echo "‚úÖ No security vulnerabilities found in dependencies" >> security-report.md
        fi
        
        echo "" >> security-report.md
        
        # Bandit check
        echo "### Code Security Issues" >> security-report.md
        bandit -r . -f json -o bandit.json || true
        if [ -s bandit.json ]; then
          echo "‚ö†Ô∏è Potential security issues found in code" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          head -50 bandit.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        else
          echo "‚úÖ No security issues found in code" >> security-report.md
        fi

    - name: Check for outdated dependencies
      run: |
        echo "## Dependency Update Check" >> dependency-report.md
        echo "" >> dependency-report.md
        
        pip list --outdated --format=json > outdated.json
        if [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
          echo "üì¶ Outdated packages found:" >> dependency-report.md
          echo "\`\`\`json" >> dependency-report.md
          cat outdated.json >> dependency-report.md
          echo "\`\`\`" >> dependency-report.md
        else
          echo "‚úÖ All dependencies are up to date" >> dependency-report.md
        fi

    - name: Update base Docker image info
      run: |
        echo "## Docker Image Updates" >> docker-report.md
        echo "" >> docker-report.md
        
        # Check for Python base image updates
        CURRENT_PYTHON=$(grep "FROM python:" Dockerfile | head -1 | cut -d':' -f2 | cut -d' ' -f1)
        echo "Current Python base image: python:${CURRENT_PYTHON}" >> docker-report.md
        
        # Note: In a real scenario, you would check Docker Hub API for updates
        echo "üìù Check [Python Docker Hub](https://hub.docker.com/_/python/tags) for latest versions" >> docker-report.md

    - name: Create maintenance issue
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');
          
          let body = "# üõ†Ô∏è Weekly Maintenance Report\n\n";
          body += "This is an automated maintenance report.\n\n";
          
          // Add security report
          if (fs.existsSync('security-report.md')) {
            body += fs.readFileSync('security-report.md', 'utf8') + "\n\n";
          }
          
          // Add dependency report
          if (fs.existsSync('dependency-report.md')) {
            body += fs.readFileSync('dependency-report.md', 'utf8') + "\n\n";
          }
          
          // Add Docker report
          if (fs.existsSync('docker-report.md')) {
            body += fs.readFileSync('docker-report.md', 'utf8') + "\n\n";
          }
          
          body += "## Actions Required\n\n";
          body += "- [ ] Review security vulnerabilities\n";
          body += "- [ ] Update outdated dependencies\n";
          body += "- [ ] Check Docker base image updates\n";
          body += "- [ ] Test updated dependencies\n";
          body += "- [ ] Update documentation if needed\n\n";
          body += "---\n";
          body += "*This issue was created automatically by the maintenance workflow.*";
          
          // Create issue
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üõ†Ô∏è Weekly Maintenance Report - ${new Date().toISOString().split('T')[0]}`,
            body: body,
            labels: ['maintenance', 'dependencies']
          });

  cleanup-packages:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    
    steps:
    - name: Delete old container images
      uses: actions/github-script@v8
      with:
        script: |
          const packages = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
            package_type: 'container',
            package_name: 'sismosve',
            username: context.repo.owner
          });
          
          // Keep last 10 versions, delete older ones
          const versionsToDelete = packages.data
            .filter(version => !version.metadata.container.tags.includes('latest'))
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(10);
          
          for (const version of versionsToDelete) {
            try {
              await github.rest.packages.deletePackageVersionForUser({
                package_type: 'container',
                package_name: 'sismosve',
                username: context.repo.owner,
                package_version_id: version.id
              });
              console.log(`Deleted package version ${version.id}`);
            } catch (error) {
              console.log(`Failed to delete version ${version.id}: ${error.message}`);
            }
          }

  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check latest Docker image
      run: |
        echo "üè• Performing health check on latest Docker image"
        
        # Pull and run latest image
        docker pull ghcr.io/${{ github.repository }}:latest
        
        # Start container
        docker run -d --name health-test -p 8000:8000 ghcr.io/${{ github.repository }}:latest
        
        # Wait for startup
        sleep 30
        
        # Health check
        if curl -f http://localhost:8000/api/health; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          docker logs health-test
          exit 1
        fi
        
        # Cleanup
        docker stop health-test
        docker rm health-test