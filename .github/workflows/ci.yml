name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.13]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx fastapi[test]

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test application startup
      env:
        TESTING: 'true'
      run: |
        python -c "
        import os
        import sys
        import tempfile
        import traceback
        
        # Configurar entorno para test
        os.environ['LOG_FILE'] = os.path.join(tempfile.gettempdir(), 'test_sismos_api.log')
        os.environ['TESTING'] = 'true'
        
        print('üß™ Testing SismosVE application...')
        
        try:
            # Test 1: Import and basic setup
            print('üì¶ Testing imports...')
            from app.main import app
            from fastapi.testclient import TestClient
            print('‚úÖ Imports successful')
            
            # Test 2: Create test client
            print('üîß Creating test client...')
            client = TestClient(app)
            print('‚úÖ Test client created')
            
            # Test 3: Health endpoint
            print('üè• Testing health endpoint...')
            response = client.get('/api/health')
            assert response.status_code == 200, f'Health check failed: {response.status_code}'
            
            data = response.json()
            assert 'status' in data, 'Health response missing status field'
            
            # En CI, aceptamos tanto healthy como unhealthy ya que no tenemos datos reales
            status = data.get('status')
            print(f'üîç Health status: {status}')
            if 'checks' in data:
                print(f'üîç Health checks: {data[\"checks\"]}')
            
            if status not in ['healthy', 'unhealthy', 'error']:
                raise AssertionError(f'Unexpected health status: {status}')
            
            print('‚úÖ Health endpoint responding correctly')
            
            # Test 4: Main endpoint
            print('üåê Testing main endpoint...')
            response = client.get('/')
            assert response.status_code == 200, f'Main endpoint failed: {response.status_code}'
            content_type = response.headers.get('content-type', '')
            assert 'text/html' in content_type, f'Expected HTML response, got {content_type}'
            print('‚úÖ Main endpoint test passed')
            
            print('üéâ All tests passed!')
            
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            print('üìù Traceback:')
            traceback.print_exc()
            sys.exit(1)
        except Exception as e:
            print(f'‚ùå Test failed: {e}')
            print('üìù Traceback:')
            traceback.print_exc()
            sys.exit(1)
        "

#   code-quality:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: 3.11

#     - name: Install quality tools
#       run: |
#         pip install black isort bandit safety

#     - name: Check code formatting with Black
#       run: black --check --diff .

#     - name: Check import sorting with isort
#       run: isort --check-only --diff .

#     - name: Security check with Bandit
#       run: bandit -r . -f json -o bandit-report.json || true

#     - name: Check dependencies with Safety
#       run: safety check --json --output safety-report.json || true

#     - name: Upload security reports
#       uses: actions/upload-artifact@v4
#       with:
#         name: security-reports
#         path: |
#           bandit-report.json
#           safety-report.json

#   docker-test:
#     runs-on: ubuntu-latest
#     needs: test
    
#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Build Docker image for testing
#       uses: docker/build-push-action@v6
#       with:
#         context: .
#         load: true
#         tags: sismosve:test
#         cache-from: type=gha
#         cache-to: type=gha,mode=max

#     - name: Test Docker image
#       run: |
#         # Start container in background
#         docker run -d --name sismosve-test -p 8000:8000 sismosve:test
        
#         # Wait for application to start
#         sleep 10
        
#         # Test health endpoint
#         curl -f http://localhost:8000/api/health || exit 1
        
#         # Test main page
#         curl -f http://localhost:8000/ || exit 1
        
#         # Clean up
#         docker stop sismosve-test
#         docker rm sismosve-test
        
#         echo "‚úÖ Docker image tests passed"

#   notify:
#     runs-on: ubuntu-latest
#     needs: [test, code-quality, docker-test]
#     if: always()
    
#     steps:
#     - name: Notify success
#       if: needs.test.result == 'success' && needs.code-quality.result == 'success' && needs.docker-test.result == 'success'
#       run: |
#         echo "‚úÖ All CI checks passed successfully!"
#         echo "Ready for Docker build and deployment"

#     - name: Notify failure
#       if: needs.test.result == 'failure' || needs.code-quality.result == 'failure' || needs.docker-test.result == 'failure'
#       run: |
#         echo "‚ùå Some CI checks failed"
#         echo "Please review the errors before proceeding"
#         exit 1